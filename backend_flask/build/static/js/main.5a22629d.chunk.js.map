{"version":3,"sources":["logo.svg","TopPage.js","Visualize.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopPage","React","Component","Visualize","props","handleClick","axios","get","headers","Accept","then","res","setState","rows","data","catch","console","error","state","useStyles","makeStyles","root","width","overflowX","table","minWidth","Button","variant","color","onClick","this","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","index","key","Album","App","src","logo","alt","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,0NCI5BC,E,sIAFOC,IAAMC,W,qFCoEbC,E,YAzDd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAMPC,YAAc,WACbC,IACEC,IAAI,iCAAkC,CACtCC,QAAS,CACRC,OAAQ,sBAGTC,MAAK,SAAAC,GACL,EAAKC,SAAS,CAAEC,KAAMF,EAAIG,UAE1BC,MAAMC,QAAQC,QAfhB,EAAKC,MAAQ,CACZL,KAAM,IAHW,E,sEAqBlB,IAAMM,EAAYC,YAAW,CAC5BC,KAAM,CACLC,MAAO,OACPC,UAAW,QAEZC,MAAO,CACNC,SAAU,OAIZ,OACC,6BACC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASC,KAAKzB,aAA1D,WAGA,kBAAC0B,EAAA,EAAD,CAAOC,UAAWb,EAAUE,MAC3B,kBAACY,EAAA,EAAD,CAAOD,UAAWb,EAAUK,MAAOU,aAAW,gBAC7C,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,mCAGF,kBAACC,EAAA,EAAD,KACER,KAAKZ,MAAML,KAAK0B,KAAI,SAACC,EAAKC,GAAN,OACpB,kBAACL,EAAA,EAAD,CAAUM,IAAKD,GACd,kBAACJ,EAAA,EAAD,KAAYG,EAAIG,mB,GA/CD1C,IAAMC,W,iBCkBf0C,G,uLAlBb,OACC,6BACC,4BAAQZ,UAAU,cACjB,yBAAKa,IAAKC,IAAMd,UAAU,WAAWe,IAAI,SACzC,qDAGD,kBAAC,IAAD,KACC,6BACC,kBAAC,IAAD,CAAOC,KAAK,OAAOC,UAAWjD,IAC9B,kBAAC,IAAD,CAAOgD,KAAK,UAAUC,UAAW9C,W,GAZrBF,IAAMC,YCEJgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.5a22629d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nclass TopPage extends React.Component {}\n\nexport default TopPage;\n","import React from 'react';\nimport axios from 'axios';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nclass Visualize extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trows: [],\n\t\t};\n\t}\n\n\thandleClick = () => {\n\t\taxios\n\t\t\t.get('http://localhost:3000/api/home', {\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'Application/json',\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tthis.setState({ rows: res.data });\n\t\t\t})\n\t\t\t.catch(console.error);\n\t};\n\n\trender() {\n\t\tconst useStyles = makeStyles({\n\t\t\troot: {\n\t\t\t\twidth: '100%',\n\t\t\t\toverflowX: 'auto',\n\t\t\t},\n\t\t\ttable: {\n\t\t\t\tminWidth: 650,\n\t\t\t},\n\t\t});\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>\n\t\t\t\t\tDefault\n\t\t\t\t</Button>\n\t\t\t\t<Paper className={useStyles.root}>\n\t\t\t\t\t<Table className={useStyles.table} aria-label=\"simple table\">\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableCell>アルバム</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{this.state.rows.map((row, index) => (\n\t\t\t\t\t\t\t\t<TableRow key={index}>\n\t\t\t\t\t\t\t\t\t<TableCell>{row.Album}</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</Paper>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Visualize;\n","import React from 'react';\n// react-router\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// Components\nimport TopPage from './TopPage';\nimport Visualize from './Visualize';\n// このページの関連\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<p>React App on Flask !!</p>\n\t\t\t\t</header>\n\t\t\t\t{/* URLに応じてコンポーネント表示を切り替え */}\n\t\t\t\t<Router>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Route path=\"/top\" component={TopPage} />\n\t\t\t\t\t\t<Route path=\"/visual\" component={Visualize} />\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}