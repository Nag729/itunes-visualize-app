{"version":3,"sources":["Copyright.js","TopPage.js","Visualize.js","App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Date","getFullYear","React","Component","TopPage","Visualize","props","handleClick","axios","get","headers","Accept","then","res","setState","rows","data","catch","console","error","state","Fragment","className","this","classes","heroContent","Container","container","maxWidth","component","gutterBottom","paragraph","heroButtons","Grid","justify","item","Button","onClick","Paper","paper","tableWrapper","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","index","key","withStyles","theme","root","width","marginTop","spacing","backgroundColor","palette","background","padding","overflowX","minWidth","maxHeight","App","CssBaseline","AppBar","position","Toolbar","icon","noWrap","path","Box","mt","body","common","white","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ccf5c3e.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nclass Copyright extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t\t{'Copyright © SonnaMonoHaNai '}\n\t\t\t\t{new Date().getFullYear()}\n\t\t\t\t{'.'}\n\t\t\t</Typography>\n\t\t);\n\t}\n}\n\nexport default Copyright;\n","import React from 'react';\n\nclass TopPage extends React.Component {}\n\nexport default TopPage;\n","import React from 'react';\nimport axios from 'axios';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { Container, Box, Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n\troot: {\n\t\twidth: '100%',\n\t\tmarginTop: theme.spacing(2),\n\t},\n\theroContent: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tpadding: theme.spacing(4, 0, 6),\n\t},\n\theroButtons: {\n\t\tmarginTop: theme.spacing(2),\n\t},\n\tpaper: {\n\t\toverflowX: 'auto',\n\t},\n\ttableWrapper: {\n\t\tminWidth: 650,\n\t\tmaxHeight: 500,\n\t},\n});\n\nclass Visualize extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trows: [],\n\t\t};\n\t}\n\n\thandleClick = () => {\n\t\taxios\n\t\t\t.get('http://localhost:3000/api/home', {\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'Application/json',\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tthis.setState({ rows: res.data });\n\t\t\t})\n\t\t\t.catch(console.error);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className={this.props.classes.heroContent}>\n\t\t\t\t\t<Container container maxWidth=\"sm\">\n\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h4\" align=\"center\" color=\"textPrimary\" gutterBottom>\n\t\t\t\t\t\t\tiTunesライブラリの情報を可視化しましょう!\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" paragraph>\n\t\t\t\t\t\t\tiTunesからエクスポートした`.xml`ファイルをアップロードすると簡単に情報を可視化できます.\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\tこれまでに最も多く聴いた曲やアーティストごとのランキングを見て、音楽の好みを再発見してください.\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<div className={this.props.classes.heroButtons}>\n\t\t\t\t\t\t\t<Grid container justify=\"center\">\n\t\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={this.handleClick} className=\"btn-search\">\n\t\t\t\t\t\t\t\t\t\tSearch Data\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\t\t\t\t<Container maxWidth=\"lg\">\n\t\t\t\t\t<Paper className={this.props.classes.paper}>\n\t\t\t\t\t\t<div className={this.props.classes.tableWrapper}>\n\t\t\t\t\t\t\t<Table stickyHeader aria-label=\"simple table\">\n\t\t\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t\t<TableCell>アーティスト</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>アルバム</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>曲名</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>リリース年</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>再生回数</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t\t{this.state.rows.map((row, index) => (\n\t\t\t\t\t\t\t\t\t\t<TableRow key={index}>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>{row['Artist']}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>{row['Album']}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>{row['Name']}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>{row['Year']}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>{row['Play Count']}</TableCell>\n\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Paper>\n\t\t\t\t</Container>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(Visualize);\n","import React from 'react';\n// react-router\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\nimport { Container, Box, CssBaseline } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// Components\nimport Copyright from './Copyright';\nimport TopPage from './TopPage';\nimport Visualize from './Visualize';\n// このページの関連\nimport './App.css';\n\nconst styles = theme => ({\n\t'@global': {\n\t\tbody: {\n\t\t\tbackgroundColor: theme.palette.common.white,\n\t\t},\n\t},\n\ticon: {\n\t\tmarginRight: theme.spacing(2),\n\t},\n});\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<CssBaseline></CssBaseline>\n\t\t\t\t<AppBar position=\"relative\">\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<MusicNoteIcon className={this.props.classes.icon} />\n\t\t\t\t\t\t<Typography variant=\"h6\" color=\"inherit\" noWrap>\n\t\t\t\t\t\t\tiTunes Visualize App!\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<main>\n\t\t\t\t\t{/* URLに応じてコンポーネント表示を切り替え */}\n\t\t\t\t\t<Router>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Route path=\"/top\" component={TopPage} />\n\t\t\t\t\t\t\t<Route path=\"/visual\" component={Visualize} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Router>\n\t\t\t\t\t<Box mt={8}>\n\t\t\t\t\t\t<Copyright />\n\t\t\t\t\t</Box>\n\t\t\t\t</main>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}